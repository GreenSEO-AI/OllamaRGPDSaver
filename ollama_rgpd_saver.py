#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sauvegarde automatique RGPD pour Ollama WebUI
- Fonctionne enti√®rement en local
- Ne partage aucune donn√©e
- Compatible avec les exigences RGPD fran√ßaises
- Surveille le dossier de t√©l√©chargement pour les conversations Ollama
"""

import os
import time
import shutil
import re
import datetime
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class OllamaConversationHandler(FileSystemEventHandler):
    """Gestionnaire de sauvegarde RGPD pour conversations Ollama"""
    
    def __init__(self, source_dir, destination_dir="Txt-AI"):
        """Initialisation avec dossiers source et destination"""
        self.source_dir = Path(source_dir)
        self.destination_dir = Path(destination_dir)
        self.destination_dir.mkdir(parents=True, exist_ok=True)
        self.processed_files = set()
        print(f"üîí Surveillance RGPD initialis√©e")
        print(f"üìÇ Dossier source: {self.source_dir}")
        print(f"üìÇ Dossier destination: {self.destination_dir}")
    
    def on_created(self, event):
        """G√®re les nouveaux fichiers dans le dossier de t√©l√©chargement"""
        if event.is_directory:
            return
            
        file_path = Path(event.src_path)
        
        # Ignore les fichiers temporaires et d√©j√† trait√©s
        if file_path.name.startswith('.') or file_path in self.processed_files:
            return
            
        # V√©rifier si c'est un fichier de conversation Ollama
        if self._is_ollama_conversation(file_path):
            self._process_conversation_file(file_path)
    
    def _is_ollama_conversation(self, file_path):
        """V√©rifie si le fichier est une conversation Ollama"""
        if not file_path.suffix.lower() == '.txt':
            return False
            
        # V√©rifier le nom ou le contenu du fichier
        if re.search(r'(chat-|GreenSEO|ollama|conversation)', file_path.name, re.IGNORECASE):
            return True
            
        # V√©rifier le contenu si n√©cessaire
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read(500)  # Lire les premiers caract√®res
                if any(marker in content for marker in ['You:', 'Assistant:', 'User:', 'Vous:', 'GreenSEO']):
                    return True
        except:
            pass
            
        return False
    
    def _process_conversation_file(self, file_path):
        """Traite et sauvegarde une conversation au format souhait√©"""
        try:
            # Marquer comme trait√© pour √©viter les doublons
            self.processed_files.add(file_path)
            
            # Lire le contenu original
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # Extraire un titre √† partir du nom de fichier
            title_match = re.search(r'chat-(.*?)\.txt', file_path.name)
            if title_match:
                title = title_match.group(1).replace(' ', '_')
            else:
                title = file_path.stem.replace(' ', '_')
                
            # Formatter le nom de fichier
            now = datetime.datetime.now()
            date_str = now.strftime("%Y%m%d_%H%M")
            date_formatted = now.strftime("%d/%m/%Y %H:%M")
            new_filename = f"vie_privee_{date_str}_{title}.txt"
            
            # Formatter le contenu selon tes pr√©f√©rences
            formatted_content = self._format_content(content, date_formatted)
            
            # Cr√©er le chemin de destination
            dest_path = self.destination_dir / new_filename
            
            # √âcrire dans le nouveau fichier
            with open(dest_path, 'w', encoding='utf-8') as f:
                f.write(formatted_content)
                
            print(f"‚úÖ Conversation sauvegard√©e: {new_filename}")
            
            # Option: supprimer le fichier original
            # os.remove(file_path)
            
        except Exception as e:
            print(f"‚ùå Erreur traitement fichier {file_path.name}: {str(e)}")
    
    def _format_content(self, content, date_formatted):
        """Formate le contenu d'une conversation"""
        # Analyse du contenu original pour le convertir au format souhait√©
        formatted_content = f"üîê SAUVEGARDE CONVERSATION\n"
        formatted_content += f"üìÖ DATE: {date_formatted}\n"
        formatted_content += f"==================================================\n"
        
        # Analyse ligne par ligne pour d√©tecter les messages
        lines = content.split('\n')
        current_role = None
        current_content = []
        
        for line in lines:
            # D√©tecter les changements de locuteur
            user_markers = ['You:', 'User:', 'Vous:', 'Utilisateur:']
            assistant_markers = ['Assistant:', 'GreenSEO:', 'AI:']
            
            if any(marker in line for marker in user_markers):
                # Sauvegarder le message pr√©c√©dent s'il existe
                if current_role and current_content:
                    role_icon = "üë§ VOUS" if current_role == "user" else "ü§ñ ASSISTANT"
                    formatted_content += f"{role_icon}:\n"
                    formatted_content += "\n".join(current_content).strip() + "\n"
                    formatted_content += "--------------------\n"
                    current_content = []
                
                # Commencer un nouveau message utilisateur
                current_role = "user"
                # Supprimer le marqueur du d√©but de la ligne
                for marker in user_markers:
                    if marker in line:
                        line = line.replace(marker, '', 1).strip()
                        break
                        
                if line:  # Si la ligne n'est pas vide apr√®s suppression du marqueur
                    current_content.append(line)
                    
            elif any(marker in line for marker in assistant_markers):
                # Sauvegarder le message pr√©c√©dent s'il existe
                if current_role and current_content:
                    role_icon = "üë§ VOUS" if current_role == "user" else "ü§ñ ASSISTANT"
                    formatted_content += f"{role_icon}:\n"
                    formatted_content += "\n".join(current_content).strip() + "\n"
                    formatted_content += "--------------------\n"
                    current_content = []
                
                # Commencer un nouveau message assistant
                current_role = "assistant"
                # Supprimer le marqueur du d√©but de la ligne
                for marker in assistant_markers:
                    if marker in line:
                        line = line.replace(marker, '', 1).strip()
                        break
                        
                if line:  # Si la ligne n'est pas vide apr√®s suppression du marqueur
                    current_content.append(line)
            
            elif current_role:
                # Continuer le message en cours
                current_content.append(line)
                
        # Ajouter le dernier message s'il existe
        if current_role and current_content:
            role_icon = "üë§ VOUS" if current_role == "user" else "ü§ñ ASSISTANT"
            formatted_content += f"{role_icon}:\n"
            formatted_content += "\n".join(current_content).strip() + "\n"
            formatted_content += "--------------------\n"
            
        formatted_content += f"üîí FIN SAUVEGARDE\n"
        return formatted_content

def main():
    """Fonction principale de surveillance"""
    # R√©cup√©rer le chemin du dossier T√©l√©chargements
    download_dir = Path.home() / "Downloads"
    if not download_dir.exists():
        download_dir = Path.home() / "T√©l√©chargements"
    
    # Dossier de destination Txt-AI
    txt_ai_dir = Path.home() / "Local Sites" / "greenseo" / "app" / "public" / "wp-content" / "themes" / "geekmind-theme" / "Txt-AI"
    
    # Cr√©er le gestionnaire et l'observateur
    event_handler = OllamaConversationHandler(download_dir, txt_ai_dir)
    observer = Observer()
    observer.schedule(event_handler, str(download_dir), recursive=False)
    
    # D√©marrer la surveillance
    observer.start()
    
    print("üîê Surveillance RGPD des conversations Ollama activ√©e")
    print("üëÄ Utilise le bouton de t√©l√©chargement dans Ollama WebUI")
    print("üìù Les fichiers seront automatiquement convertis au format appropri√©")
    print("‚å®Ô∏è Appuyez sur Ctrl+C pour arr√™ter")
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
        print("\nüëã Surveillance arr√™t√©e")
    
    observer.join()

if __name__ == "__main__":
    main()
